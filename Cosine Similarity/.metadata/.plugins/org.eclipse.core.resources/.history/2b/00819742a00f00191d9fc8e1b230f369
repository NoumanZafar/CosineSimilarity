package ie.gmit.sw;

import java.util.*;
import java.util.concurrent.*;

/**
 * This class takes the user input for the files (Query files and Subject
 * files). and then call the different classes to parse the file and generate
 * the ConcurrenHashMap and the out of that map calculate the Cosine-Similarity
 * and display the result in percentage e.g CosineSimilarity with [Filename] is
 * : 100.00%
 * 
 * @author Nouman
 *
 */
public class Results {

	/**
	 * To take user input from console.
	 */
	private Scanner console;

	/**
	 * List holds the name of all the files in a folder.
	 */
	private List<String> filesList;
	private ExecutorService pool;

	/**
	 * Composition with the {@link SubjectProcess} class
	 */
	private SubjectProcess subjectFileProcess;
	private ConcurrentHashMap<String, Integer> queryMap;
	private BlockingQueue<ConcurrentHashMap<String, Integer>> subjectMapsList;

	/**
	 * Number of character needs to be read during the file reading. This may effect
	 * the performance of the program as well as on the results. e.g If the size is
	 * bigger then it will be fast enough to read the file and process and vice
	 * versa.
	 */
	private int k_mer_size = 15;

	/**
	 * Capacity of the BlockingQueue.
	 */
	private int queueSize = 20;

	/**
	 * Number of threads available in the JVM.
	 */
	private int poolSize = Runtime.getRuntime().availableProcessors();
	private int MAX_FILES = 20;

	public Results() {
		super();
		console = new Scanner(System.in);
		filesList = new ArrayList<String>();
		pool = Executors.newFixedThreadPool(poolSize);
		queryMap = new ConcurrentHashMap<String, Integer>();
		subjectFileProcess = new SubjectProcess(filesList, k_mer_size, MAX_FILES);
		subjectMapsList = new ArrayBlockingQueue<ConcurrentHashMap<String, Integer>>(MAX_FILES);
	}

	public void go() {
		int i = 0;
		try {
			System.out.print("Enter Query File or URL --> ");
			String file = console.nextLine();

			System.out.print("Enter Subject Directory --> ");
			String dir = console.nextLine();

			long startTime = System.currentTimeMillis();
			System.out.println("\n\nProcessing....Please wait....!!!");
			queryMap = new QueryProcess(k_mer_size).queryFileRead(file, queueSize, poolSize);
			subjectMapsList = subjectFileProcess.readSubjectFolder(dir, queueSize, 2);
			filesList = subjectFileProcess.getList();

			System.out.println("\n-----------------------------------------------------------------------");
			for (ConcurrentHashMap<String, Integer> map : subjectMapsList) {
				Future<Double> future = pool.submit(new SimilarityCalculation(queryMap, map));
				Double result = future.get();
				if (filesList.size() > 0) {
					System.out.println("Cosine Similarity with [" + filesList.get(i++) + "] is : "
							+ String.format("%.2f", result) + " %");
				} else {
					System.out.println(
							"Cosine Similarity with [" + dir + "] is : " + String.format("%.2f", result) + " %");
				}
			}
			System.out.println("-----------------------------------------------------------------------");
			System.out.println("\nTotal Run Time ------> " + (double) ((System.currentTimeMillis() - startTime) * 0.001)
					+ " sec.");
			pool.shutdown();
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();
		}
	}
}
