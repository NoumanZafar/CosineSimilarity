package ie.gmit.sw;

import java.util.*;
import java.util.concurrent.*;

public class Similarity {
	private Scanner console;
	private List<String> filesList;
	private ExecutorService pool;
	private SubjectProcess subjectFileProcess;
	private ConcurrentHashMap<String, Integer> queryMap;
	private BlockingQueue<ConcurrentHashMap<String, Integer>> subjectMapsList;
	private int charLength = 10;
	private int queueSize = 20;
	private int poolSize = 10;
	private int MAX_FILES = 20;

	public Similarity() {
		super();
		console = new Scanner(System.in);
		filesList = new ArrayList<String>();
		pool = Executors.newFixedThreadPool(poolSize);
		queryMap = new ConcurrentHashMap<String, Integer>();
		subjectFileProcess = new SubjectProcess(filesList, charLength, MAX_FILES);
		subjectMapsList = new ArrayBlockingQueue<ConcurrentHashMap<String, Integer>>(MAX_FILES);
	}

	public void go() {
		int i = 0;
		try {
			System.out.print("Enter Query File or URL --> ");
			String file = console.nextLine();

			System.out.print("Enter Subject Directory --> ");
			String dir = console.nextLine();

			queryMap = new QueryProcess(charLength).queryFileRead(file, queueSize, poolSize);
			subjectMapsList = subjectFileProcess.readSubjectFolder(dir, queueSize, 2);
			filesList = subjectFileProcess.getList();

			System.out.println(subjectMapsList.size());

			for (ConcurrentHashMap<String, Integer> map : subjectMapsList) {
				Future<Double> future = pool.submit(new CosineSimilarity(queryMap, map));
				Double result = future.get();
				System.out.println("Cosine Similarity with [" + filesList.get(i++) + "] is : "
						+ String.format("%.2f", result) + " %");
			}

			pool.shutdown();
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();
		}
	}
}
