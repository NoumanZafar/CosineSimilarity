package ie.gmit.sw;

import java.util.*;
import java.util.concurrent.*;

public class SubjectShingleTaker implements Callable<List<ConcurrentHashMap<String, Integer>>> {
	private BlockingQueue<Shingle> queue;
	private int fileCount;
	private boolean keepRunning = true;
	private ConcurrentHashMap<String, Integer> subjectMap = new ConcurrentHashMap<String, Integer>();
	private List<ConcurrentHashMap<String, Integer>> list = new ArrayList<ConcurrentHashMap<String, Integer>>();

	public SubjectShingleTaker(BlockingQueue<Shingle> queue, int fileCount) {
		super();
		this.queue = queue;
		this.fileCount = fileCount;
	}

	public List<ConcurrentHashMap<String, Integer>> call() throws Exception {
		while (fileCount > 0 && keepRunning) {
			Shingle w = queue.take();
			if (w instanceof Poison) {
				list.add(subjectMap);
				subjectMap = new ConcurrentHashMap<String, Integer>();
				fileCount--;
			} else {
				String shingle = w.getShingle();
				Integer n = subjectMap.get(shingle);
				n = (n == null) ? 1 : ++n;
				subjectMap.put(shingle, n);
			}
		}
		System.out.println("outer return.");
		return list;
	}
}
