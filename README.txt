Project Read-me.

Project : Cosine Similarity
Author : Muhammad Nouman zafar
Version : 1.0

Description : This software is multi threaded which takes the a Query file and compare against a folder or single file and display the results that how mush two files are similar to each other. This program uses the k-mer of size 15 (could be changed) to compare the distance between the files so a little difference in the files will make  a huge impact on the results.

Classes : These the classes I have used in this program.
			01. FileParser
			02. Poison
			03. QueryProcess
			04. QueryShingleTaker
			05. Results
			06. Runner
			07. SimilarityCalculation
			08. SubjectProcess
			09. SubjectShingleTaker
			10. Shingle

FileParser : This is a class which is responsible for reading the files form the OS. This class implements the Callable interface (It is used because it can be executed by the thread pool and there is no worry for the Synchronization etc.) which has call() method and this method return null in this case. Call method uses Reader and InputStreamReader (InputStreamReader can read anything like images text streams etc.) to read the data. All the data is read in chunks (Number of characters at a time) I am using 15 characters at a time (smaller or bigger chunks might change the results and the performance of the program) but can be changed in Results class. Reader (is used because the Encoding can applied like UTF-8) reads 15 characters and add them in BlockingQueue and this process is repeated until the end of file. At the end an instance of Poison class is added in order the detect the end of file or stream. FileParser class can parse any thing e.g text, images etc. 

Poison : This class extends another class called Shingle. The role of this class is to add and instance in the BlockingQueue at the end of each file in order to detect the end of file.

QueryProcess : This class has the responsibility of taking the QueryShingleTaker and FileParser classes and provide them pool of Threads to execute them. queryFileRead(String fileName, int fileCount) method Instantiate the ExecutorService (provides the thread pool to handle all the threads) and ConcurrentHashMap (Thread safe). Whenever QueryShingleTaker return any results those results are assigned to a Future object of type ConcurrentHashMap<String, Integer> which are later returned by the method.

QueryShingleTaker : This class implements Callable interface which returns ConcurrentHashMap. This class takes BlockingQueue and generate ConcurrentHashMap which is Thread safe data structure. call() method takes the instances from BlockingQueue and check the frequency of Shingles and count them. e.g shingle "ABCDEFG" which is the Key of the Map and the frequency of it's occurrence is the value of the Map.

Results : This class takes the user input for Query files and the Subject folder/file and call the SimilarityCalculation class and which returns the results and then those results are displayed to the user. e.g CosineSimilarity with [Filename] is : 54.99%

Runner : This class provides the main method which executes the whole program in JVM.

SimilarityCalculation : This class takes the two maps generated by the Query and SubjectShingleTaker classes and calculate the results.
These are the steps involved in calculation.
	1. Dot Product : dotProduct = (Sum of shingle frequency in Query map) * (Sum of shingle frequency in Subject map) 
	2. Magnitude : magnitude = sum of the number of keys with power of two in both maps. Magnitude is calculated for both individually 
	3. similarity = dotProduct / (Square root of query magnitude) X (Square root of subject magnitude).
	
SubjectProcess : This class takes the SubjectShingleTaker and process that by providing the Thread pool as well as to the FileParser class to parse the whole folder or single file and at the end of all the files method returns the BlockingQueue which holds the ConcurrentHashMap for each file individually.

SubjectShingleTaker : This class takes the BlockingQueue from FileParser class and generate the ConcurrentHashMap for each file in the folder and add that map into the BlockingQueue.

Shingle : This class takes the fileName and shingle where shingle is the combination of characters read from the files. I am using 15 character shingle.


Extra : Instead of taking the whole folder as Subject I have given the option that a user can compare the whole folder against the Query file or user can use a single file to compare and calculate the similarity.



Execution : To run the program there is jar file with the name oop.jar which is executable with the command in command line "java –cp ./oop.jar ie.gmit.sw.Runner"

